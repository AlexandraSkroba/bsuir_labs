import numpy as np

if __name__ == '__main__':
    # Получаем порядок матрицы от пользователя
    # order = int(input("Введите порядок матрицы: "))

    order = 3

    # Генерируем матрицу A и вектор-столбец x
    # A = np.random.randint(-1, 2, size=(order, order))
    # x = np.random.randint(-1, 2, size=(order, 1))

    A = np.zeros((order, order))
    x = np.zeros((order, 1))

    A = np.array([[1, -1, 0],
                  [0, 1, 0],
                  [0, 0, 1]])

    x = np.array([[1],
                  [0],
                  [1]])

    Q = np.eye(order)

    print('Исходная матрица A:')
    print(A)

    A_inv = np.linalg.inv(A)
    print("Обратная матрица:")
    print(A_inv)

    print('Вектор-столбец x:')
    print(x)

    i = int(input("Введите индекс i: ")) - 1

    _A = A.copy()
    _A[:, i] = x.flatten()

    print(_A)

    try:
        # Находим ℓ = A(−1)*x. Если ℓi = 0, то матрица _A необратима и метод завершает свою работу;
        # в противном случае матрица _A обратима и мы переходим на следующий шаг
        l = A_inv @ x
        print("ШАГ1. Вектор-столбец ℓ:")
        print(l)
        print('--------------------')

        # Проверяем, содержит ли вектор-столбец l нулевые элементы
        if l[i] == 0:
            print(f"Матрица A необратима, так как элемент вектора-столбца ℓ под индексом {i + 1} равен 0.")
            exit()
        else:
            print("Матрица A обратима.")

        # ШАГ2. Формируем вектор l1, который получается из вектора l заменой i-го элемента на −1
        l1 = l.copy()
        l1[i] = -1
        print("Вектор l1:")
        print(l1)

        # ШАГ3. Находим l2
        l2 = -1 / l[i] * l1
        l2 = np.sign(l2) * np.abs(l2)
        print("Вектор l2:")
        print(l2)

        # ШАГ4. Формируем матрицу Q, которая получается из единичной матрицы
        # порядка n заменой i-го столбца на столбец l2.
        Q[:, i] = l2.flatten()
        print("Матрица Q с замененным столбцом:")
        print(Q)

        #ШАГ5. Находим матрицу обратную к матрице A_inv
        AQ_inv = Q @ A_inv
        print('--------------------')
        print(AQ_inv)

    except np.linalg.LinAlgError:
        print("Обратной матрицы не существует, так как матрица A вырождена.")

